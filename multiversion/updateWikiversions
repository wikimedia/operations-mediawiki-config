#!/usr/bin/env php
<?php
error_reporting( E_ALL );

require_once __DIR__ . '/defines.php';
require_once __DIR__ . '/MWWikiversions.php';
require_once __DIR__ . '/MWRealm.php';

/*
 * This script switches all wikis in a .dblist file running one MediaWiki
 * version to another MediaWiki version. Since this only changes the wikiversions.json
 * and wikiversions.php files on tin, they will still need to be synced to push
 * the upgrade/downgrade to the apaches.
 *
 * The first argument is the old version, typically of the format "php-X.XX-wmf.X".
 * If "all" is given, then all wikis will be switched over.
 * The second argument is the new version, typically of the format "php-X.XX-wmf.X".
 * The third argument is the name of a .dblist file under the common/ dir.
 *
 * @return void
 */
function updateWikiversions() {
	global $argv;
	$common = MEDIAWIKI_STAGING_DIR;
	$jsonPath = getRealmSpecificFilename( MEDIAWIKI_STAGING_DIR . '/wikiversions.json' );

	if ( count( $argv ) !== 3 ) {
		print "Usage: updateWikiversions <name>.dblist php-X.XX-wmf.X\n";
		exit( 1 );
	}

	$dbListName = basename( $argv[1], '.dblist' );
	$dbList = MWWikiversions::readDbListFile( $dbListName );

	$newVersion = $argv[2];
	if ( !preg_match( MEDIAWIKI_DIRECTORY_REGEX, $newVersion ) || !is_dir( "$common/$newVersion" ) ) {
		print "Invalid version specifier: $newVersion\n";
		exit( 1 );
	}

	if ( file_exists( $jsonPath ) ) {
		$versionRows = MWWikiversions::readWikiVersionsFile( $jsonPath );
	} else {
		if ( $dbListName !== 'all' ) {
			echo "No $jsonPath file and not invoked with 'all'. Cowardly refusing to act.\n";
			exit( 1 );
		}
		echo "$jsonPath not found -- rebuilding from scratch!\n";
		$versionRows = array();
	}

	$inserted = 0;
	$migrated = 0;

	foreach ( $dbList as $dbName ) {
		if ( !isset( $versionRows[$dbName] ) ) {
			$inserted++;
		} else {
			$migrated++;
		}
		$versionRows[$dbName] = $newVersion;
	}

	$total = count( $versionRows );
	ksort( $versionRows );

	MWWikiversions::writeWikiVersionsFile( $jsonPath, $versionRows );
	echo "Updated $jsonPath: $inserted inserted, $migrated migrated.\n";
}

function updateBranchPointers() {
	$branchDirs = MWWikiversions::getAvailableBranchDirs();

	if ( !$branchDirs ) {
		fwrite( STDERR, __FUNCTION__ . ': no deployment branch directories found in ' . MEDIAWIKI_DEPLOYMENT_DIR . "\n" );
		exit( 1 );
	}

	// Default sort is lexographical which incorrectly sorts e.g. [1.23wmf9, 1.23wmf10]
	usort( $branchDirs, 'version_compare' );
	$current = array_pop( $branchDirs );

	// Symlink common/php to the current branch using a relative path so that
	// the symlink works from both MEDIAWIKI_STAGING_DIR and
	// MEDIAWIKI_DEPLOYMENT_DIR
	$phpLinkTarget = substr( $current, strlen( MEDIAWIKI_DEPLOYMENT_DIR ) + 1 );
	updateSymlink( MEDIAWIKI_STAGING_DIR . '/php', $phpLinkTarget );
}

/**
 * @param string $link
 * @param string $dest
 */
function updateSymlink( $link, $dest ) {
	// Change pwd to MEDIAWIKI_STAGING_DIR so that relative paths can be verified
	chdir( MEDIAWIKI_STAGING_DIR );

	if ( !file_exists( $dest ) ) {
		fwrite( STDERR, __FUNCTION__ . ": link target $dest does not exist.\n" );
		exit( 1 );
	}

	if ( file_exists( $link ) ) {
		if ( realpath( $link ) === realpath( $dest ) ) {
			echo "$link is already up-to-date.\n";
			return;
		}

		if ( !is_link( $link ) ) {
			fwrite( STDERR, __FUNCTION__ . ": $link exists and is not a symbolic link.\n" );
			exit( 1 );
		}

		if ( !unlink( $link ) ) {
			fwrite( STDERR, __FUNCTION__ . ": failed to unlink $link\n" );
			exit( 1 );
		}
	}

	if ( !symlink( $dest, $link ) ) {
		fwrite( STDERR, __FUNCTION__ . ": failed to create $link\n" );
		exit( 1 );
	}
	echo "$link => $dest\n";
}

updateWikiversions();
updateBranchPointers();
