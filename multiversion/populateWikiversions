#!/usr/bin/env php
<?php

error_reporting( E_ALL );
require_once( __DIR__ . '/defines.php' );
require_once( __DIR__ . '/MWRealm.php' );
require_once( __DIR__ . '/MWWikiversions.php' );
require_once( __DIR__ . '/FormatJson.php' );

/*
 * Populate wikiversions.cdb file using all the items in all.dblist
 * as keys, each having a value of the specified MediaWiki version.
 * This means that all will be configured to run that version.
 *
 * The first argument is the version, typically of the format "php-X.XXwmfX".
 *
 * @return void
 */
function populateWikiversionsCDB() {
	global $argv;

	$argsValid = false;
	if ( count( $argv ) == 2 ) {
		$version = $argv[1]; // e.g. "php-X.XXwmfX"
		if ( preg_match( '/^php-(\d+\.\d+wmf\d+|master)$/', $version ) ) {
			$argsValid = true;
		}
	}

	if ( !$argsValid ) {
		print "Usage: populateWikiversions php-X.XXwmfX\n";
		exit( 1 );
	}

	$dbList = MWWikiversions::readDbListFile( getRealmSpecificFilename( MULTIVER_COMMON_HOME . '/all.dblist' ) );

	$wikis = array();
	foreach ( $dbList as $dbName ) {
		$wikis[$dbName] = $version;
	}

	# Create wikiversions.json...
	$path = getRealmSpecificFilename( MULTIVER_CDB_DIR_HOME . '/wikiversions.json' );
	MWWikiversions::writeWikiVersionsFile( $path, $wikis );

	# Rebuild wikiversions.cdb...
	shell_exec( 'cd ' . MULTIVER_COMMON_HOME . '/multiversion && ./refreshWikiversionsCDB' );
}

populateWikiversionsCDB();
