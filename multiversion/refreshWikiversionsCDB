#!/usr/bin/env php
<?php

error_reporting( E_ALL );

require_once( __DIR__ . '/defines.php' );
require_once( __DIR__ . '/MWWikiversions.php' );
require_once( __DIR__ . '/MWRealm.php' );
require_once( __DIR__ . '/vendor/autoload.php' );

use Cdb\Exception as CdbException;
use Cdb\Writer as CdbWriter;

/*
 * Populate wikiversions.cdb file using all the items in wikiversions.json
 *
 * @return void
 */
function refreshWikiversionsCDB() {
	$srcPath = getRealmSpecificFilename( MEDIAWIKI_STAGING_DIR . '/wikiversions.json' );

	$cdbFilename = getRealmSpecificFilename(
		MEDIAWIKI_STAGING_DIR . '/wikiversions.cdb'
	);
	$phpFilename = getRealmSpecificFilename(
		MEDIAWIKI_STAGING_DIR . '/wikiversions.php'
	);

	$tmpDBPath = $cdbFilename . '.tmp';
	$finalDBPath = $cdbFilename;

	// Get the array of sanitized wikiversion rows...
	$rows = MWWikiversions::readWikiVersionsFile( $srcPath );
	// Sanity check version directories...
	foreach ( $rows as $dbName => $version ) {
		$versionDir = MEDIAWIKI_STAGING_DIR . '/' . $version;
		if ( !is_dir( $versionDir ) ) {
			print "Invalid version dir '$versionDir' for wiki '$dbName'.\n";
			exit( 1 );
		}
	}

	$dbList = $wmfRealm === 'labs' ? 'all-labs' : 'all';
	$dbNames = MWWikiversions::readDbListFile( $dbList );
	$diff = array_diff( $dbNames, array_keys( $rows ) );
	if ( count( $diff ) ) {
		print_r( $diff );
		print "The above " . count( $diff ) . " wiki DBs are missing wikiversion rows.\n";
		exit( 1 );
	}

	# Build the new database at the temp location...
	@unlink( $tmpDBPath ); // clear any old temp file for sanity
	try {
		$db = CdbWriter::open( $tmpDBPath );
	} catch ( CdbException $e ) {}

	if ( !$db ) {
		print "Unable to create {$tmpDBPath}.\n";
		exit( 1 );
	}
	foreach ( $rows as $dbName => $version ) {
		$db->set( "ver:$dbName", $version );
	}
	$db->close();

	# Sanity check the temp file...
	if ( !is_file( $tmpDBPath ) ) {
		print "Unable to create {$tmpDBPath}.\n";
		exit( 1 );
	}

	# Move temp file to the final location only when finished...
	if ( !rename( $tmpDBPath, $finalDBPath ) ) {
		print "Unable to move {$tmpDBPath} to {$finalDBPath}.\n";
		exit( 1 );
	}
	chmod( $finalDBPath, 0664 ); // rw-rw-r

	print "{$cdbFilename} successfully built.\n";

	$header = '// Generated by ' . basename( __FILE__ ) . "\n";
	$phpCode = "<?php\n" .  $header .  'return ' . var_export( $rows, true ) . ";\n";
	$phpCode = preg_replace( '/(\d+ \=\>| (?=\())/i', '', $phpCode );
	$phpCode = preg_replace( "/^ +/m", "\t", $phpCode );
	file_put_contents(  $phpFilename, $phpCode, LOCK_EX );
	chmod( $phpFilename, 0664 ); // rw-rw-r

	print "{$phpFilename} successfully built.\n";
}

refreshWikiversionsCDB();
