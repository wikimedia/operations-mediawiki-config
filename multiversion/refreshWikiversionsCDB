#!/usr/bin/env php
<?php

error_reporting( E_ALL );

require_once( dirname( __FILE__ ) . '/defines.php' );
require_once( dirname( __FILE__ ) . '/MWWikiversions.php' );
require_once( dirname( __FILE__ ) . '/MWRealm.php' );
require_once( dirname( __FILE__ ) . '/Cdb.php' );

/*
 * Populate wikiversions.cdb file using all the items in wikiversions.dat
 *
 * @return void
 */
function refreshWikiversionsCDB() {
	$srcPath = getRealmSpecificFilename( MULTIVER_CDB_DIR_HOME . '/wikiversions.dat' );

	$cdbFilename = getRealmSpecificFilename(
		MULTIVER_CDB_DIR_HOME . '/wikiversions.cdb'
	);

	$tmpDBPath = $cdbFilename . '.tmp';
	$finalDBPath = $cdbFilename;

	// Get the array of sanitized wikiversion rows...
	$rows = MWWikiversions::readWikiVersionsFile( $srcPath );
	// Sanity check version directories...
	foreach ( $rows as $row ) {
		list( $dbName, $version, $extVersion, $comment ) = $row;
		$versionDir = MULTIVER_COMMON_HOME . '/' . $version;
		if ( !is_dir( $versionDir ) ) {
			print "Invalid version dir '$versionDir' for wiki '$dbName'.\n";
			exit( 1 );
		}
	}
	// Make sure all wikis have an entry...
	$dbNamesWithRows = array();
	foreach ( $rows as $row ) {
		$dbNamesWithRows[$row[0]] = 1;
	}
	$dbNames = MWWikiversions::readDbListFile( getRealmSpecificFilename( MULTIVER_COMMON_HOME . '/all.dblist' ) );
	$diff = array_diff_key( $dbNames, $dbNamesWithRows );
	if ( count( $diff ) ) {
		print_r( $diff );
		print "The above " . count( $diff ) . " wiki DBs are missing wikiversion rows.\n";
		exit( 1 );
	}

	# Build the new database at the temp location...
	@unlink( $tmpDBPath ); // clear any old temp file for sanity
	try {
		$db = CdbWriter::open( $tmpDBPath );
	} catch ( CdbException $e ) {}

	if ( !$db ) {
		print "Unable to create {$tmpDBPath}.\n";
		exit( 1 );
	}
	foreach ( $rows as $row ) {
		list( $dbName, $version, $extVersion, $comment ) = $row;
		if ( $extVersion === '*' ) {
			$extVersion = ''; // "*" means "none"
		}
		$db->set( "ver:$dbName", $version );
		$db->set( "ext:$dbName", $extVersion );
	}
	$db->close();

	# Sanity check the temp file...
	if ( !is_file( $tmpDBPath ) ) {
		print "Unable to create {$tmpDBPath}.\n";
		exit( 1 );
	}

	# Move temp file to the final location only when finished...
	if ( !rename( $tmpDBPath, $finalDBPath ) ) {
		print "Unable to move {$tmpDBPath} to {$finalDBPath}.\n";
		exit( 1 );
	}
	chmod( $finalDBPath, 0664 ); // rw-rw-r

	print "{$cdbFilename} successfully built.\n";
}

refreshWikiversionsCDB();
