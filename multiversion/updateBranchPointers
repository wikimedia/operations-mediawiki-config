#!/usr/bin/env php
<?php
/**
 * Create/update various symlinks used in production.
 *
 * w/static/current links to the latest production branch, respectively.
 * This provides a stable URL to large static assets that are served by
 * extensions and which do not change frequently.
 *
 * php links to the current primary deployed version of MediaWiki.
 *
 * Usage: updateBranchPointers
 */
error_reporting( E_ALL );
require_once __DIR__ . '/MWWikiversions.php';
require_once __DIR__ . '/defines.php';

function isMain() {
	return basename( __FILE__ ) === basename( $_SERVER['SCRIPT_FILENAME'] );
}

function updateBranchPointers() {
	$branchDirs = MWWikiversions::getAvailableBranchDirs();

	if ( !$branchDirs ) {
		fwrite( STDERR, __FUNCTION__ . ': no deployment branch directories found in ' . MEDIAWIKI_DEPLOYMENT_DIR . "\n" );
		exit( 1 );
	}

	// Default sort is lexographical which incorrectly sorts e.g. [1.23wmf9, 1.23wmf10]
	usort( $branchDirs, 'version_compare' );
	$current = array_pop( $branchDirs );

	// Symlink common/php to the current branch using a relative path so that
	// the symlink works from both MEDIAWIKI_STAGING_DIR and
	// MEDIAWIKI_DEPLOYMENT_DIR
	$phpLinkTarget = substr( $current, strlen( MEDIAWIKI_DEPLOYMENT_DIR ) + 1 );
	updateSymlink( MEDIAWIKI_STAGING_DIR . '/php', $phpLinkTarget );
}

/**
 * @param string $link
 * @param string $dest
 */
function updateSymlink( $link, $dest ) {
	// Change pwd to MEDIAWIKI_STAGING_DIR so that relative paths can be verified
	chdir( MEDIAWIKI_STAGING_DIR );

	if ( !file_exists( $dest ) ) {
		fwrite( STDERR, __FUNCTION__ . ": link target $dest does not exist.\n" );
		exit( 1 );
	}

	if ( file_exists( $link ) ) {
		if ( realpath( $link ) === realpath( $dest ) ) {
			echo "$link is already up-to-date.\n";
			return;
		}

		if ( !is_link( $link ) ) {
			fwrite( STDERR, __FUNCTION__ . ": $link exists and is not a symbolic link.\n" );
			exit( 1 );
		}

		if ( !unlink( $link ) ) {
			fwrite( STDERR, __FUNCTION__ . ": failed to unlink $link\n" );
			exit( 1 );
		}
	}

	if ( !symlink( $dest, $link ) ) {
		fwrite( STDERR, __FUNCTION__ . ": failed to create $link\n" );
		exit( 1 );
	}
	echo "$link => $dest\n";
}


if ( isMain() ) {
	updateBranchPointers();
}
