{
  "comments": [
    {
      "key": {
        "uuid": "6eaa8f54_e962e8d3",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 17
      },
      "writtenOn": "2016-01-15T05:44:06Z",
      "side": 1,
      "message": "You should also send \"X-Content-Type-Options: nosniff\". I know you only call this function with string literals, but you never know what the next dev will send to it.",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_899334a5",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 17
      },
      "writtenOn": "2016-01-15T05:44:06Z",
      "side": 1,
      "message": "So the idea is to allow streaming of any file under any branch directory that has a known type? I think it would be more conventional to at least deny access to *.php files, in case they have private configuration data.",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_8f56b0cf",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 34
      },
      "writtenOn": "2016-01-20T21:11:30Z",
      "side": 1,
      "message": "Good point, since this won\u0027t adhere to htaccess or some such.\n\nI did try accessing a php file when I applied this to mw1017 last week and it denied that, because StreamFile::contentTypeFromPath in core doesn\u0027t support PHP. It only looks at the file path, not at the contents.\n\ndoGuessMimeType() doesn\u0027t get called here (which is the only method that does support PHP). Anyway, I agree we shouldn\u0027t rely on that.\n\nNote that at the moment, we\u0027ve always allowed public access to PHP files in the document root. This has been the case on bits in the past, and is currently the case in /static/{version}/extensions and /static/{version}/skins as well. So this wouldn\u0027t change anything.\n\nIn fact, this makes it stricter as it limits it to mime types known to MW, as opposed to any file arbitrarily. Not much, but no worse than current state.\n\nhttps://bits.wikimedia.org/w/extensions/VisualEditor/VisualEditor.php (plain text)\n\nhttps://bits.wikimedia.org/static-current/extensions/VisualEditor/VisualEditor.php (plain text)",
      "parentUuid": "6eaa8f54_899334a5",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_09a984db",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 17
      },
      "writtenOn": "2016-01-15T05:44:06Z",
      "side": 1,
      "message": "It should also have an Expires header.",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_0f62c0a2",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 34
      },
      "writtenOn": "2016-01-20T21:11:30Z",
      "side": 1,
      "message": "I intentionally left this out as it is obsoleted by max-age, and has issues with Varnish caching. Afaik Varnish will add that header dynamically the right way (instead of this file hardcoding it into cache the wrong way).",
      "parentUuid": "6eaa8f54_09a984db",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_955d62f2",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 17
      },
      "writtenOn": "2016-01-21T04:58:19Z",
      "side": 1,
      "message": "Is this documented somewhere?",
      "parentUuid": "6eaa8f54_0f62c0a2",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_356cae98",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 17
      },
      "writtenOn": "2016-01-21T05:18:38Z",
      "side": 1,
      "message": "Judging by https://www.varnish-cache.org/trac/wiki/VCLExampleSetExpires , Varnish will not add an Expires header -- we use Varnish 3.0 which requires a lengthy piece of inline C to do so, and there\u0027s no such code in our current configuration. According to RFC 2616 and RFC 7234, CC:maxage overrides the Expires header when both are present -- are you saying that Varnish does not correctly implement this behaviour?",
      "parentUuid": "6eaa8f54_955d62f2",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ea78b8a_6e4ec09d",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 34
      },
      "writtenOn": "2016-02-03T15:04:14Z",
      "side": 1,
      "message": "I\u0027m not sure about Varnish. However RL performance is suffering from T105657.\n\nAnd with CC obsoleting Expires, there doesn\u0027t seem to be much point in adding it. Except maybe for older browsers?\n\nRoan and I ran repeated isolated 1-week experiments over the course of 5 weeks last year and very consistently found that clients all come back for Expires in close clustering. As such suggesting they were following Expires, not Cache-Control – primarily because the date in Expires is hard-coded and cached by Varnish, it doesn\u0027t bounce relatively the way Cache-Control works. The experiments in question did not involve Varnish caching (we were doing it from an isolated file served from testwiki/mw1017 with a cache busting query parameter and a two-step request - that is, one request requesting the other one). So we could see exactly for how long a browser was re-using an old resource.\n\nGrepping for \"Cache-Control\" (ack -Q -i --php) in mediawiki-config, vs Expires (ack -Q --php), shows that we\u0027ve left out Expires in the past as well. Only touch.php and favicon.php set it.\n\nI\u0027m fine with setting it here, I don\u0027t mind. Either way would be consistent with something we\u0027re doing somewhere else (!). And cache-miss pressure is certainly not a problem for static resources, so it wouldn\u0027t do harm either.\n\nOpen to further input on T105657 though.",
      "parentUuid": "6eaa8f54_356cae98",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_66caa71f",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 34
      },
      "writtenOn": "2016-01-15T02:39:38Z",
      "side": 1,
      "message": "TODO: Once MediaWiki core uses hashes in urls, use the static method for that here instead of duplicating the logic. Right now, this isn\u0027t a duplicate yet as the mw-core equivalent doesn\u0027t exist yet.",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_c9404c3b",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 17
      },
      "writtenOn": "2016-01-15T05:44:06Z",
      "side": 1,
      "message": "FYI, there is substr_compare() for this.",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eaa8f54_efe96410",
        "filename": "w/static.php",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 34
      },
      "writtenOn": "2016-01-20T21:11:30Z",
      "side": 1,
      "message": "Thanks, done.",
      "parentUuid": "6eaa8f54_c9404c3b",
      "revId": "090053b862912a838d297ae265e5994e43b82125",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}